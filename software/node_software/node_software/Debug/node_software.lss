
node_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ee  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a1  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000538  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000541  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a1  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000023de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  78:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <power_on_external_peripherals>:
          _delay_ms(1);
          delay_time = delay_time + 1;
      }
    }
  }
}
  80:	38 9a       	sbi	0x07, 0	; 7
  82:	40 9a       	sbi	0x08, 0	; 8
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	80 e7       	ldi	r24, 0x70	; 112
  88:	92 e0       	ldi	r25, 0x02	; 2
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <power_on_external_peripherals+0xa>
  92:	00 c0       	rjmp	.+0      	; 0x94 <power_on_external_peripherals+0x14>
  94:	00 00       	nop
  96:	08 95       	ret

00000098 <serial_init>:

void serial_init(uint32_t baud){
	/* init UART bus*/
	
	// set UBBRn registers with baud rate
	uint16_t value = F_CPU / (16*baud) - 1;
  98:	dc 01       	movw	r26, r24
  9a:	cb 01       	movw	r24, r22
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	aa 1f       	adc	r26, r26
  a2:	bb 1f       	adc	r27, r27
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	aa 1f       	adc	r26, r26
  aa:	bb 1f       	adc	r27, r27
  ac:	9c 01       	movw	r18, r24
  ae:	ad 01       	movw	r20, r26
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	44 1f       	adc	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	44 1f       	adc	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	72 e1       	ldi	r23, 0x12	; 18
  c4:	8a e7       	ldi	r24, 0x7A	; 122
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 b0 00 	call	0x160	; 0x160 <__udivmodsi4>
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	31 09       	sbc	r19, r1
	UBRR0L = value & 0xFF;
  d0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (value>>7) && 0xFF;
  d4:	22 0f       	add	r18, r18
  d6:	23 2f       	mov	r18, r19
  d8:	22 1f       	adc	r18, r18
  da:	33 0b       	sbc	r19, r19
  dc:	31 95       	neg	r19
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	23 2b       	or	r18, r19
  e2:	09 f4       	brne	.+2      	; 0xe6 <serial_init+0x4e>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	// Set frame format: 8data, 2stop bit
	UCSR0C = (3<<UCSZ00);
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  f6:	08 95       	ret

000000f8 <serial_send>:
}

void serial_send(char *string) {
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	dc 01       	movw	r26, r24
	char current_char = 0;
	do
	{
		current_char = string[iterator];
		iterator++;
		while (!(UCSR0A & (1<<UDRE0)));
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
		// Put data into buffer, sends the data
		UDR0 = current_char;
 102:	c6 ec       	ldi	r28, 0xC6	; 198
 104:	d0 e0       	ldi	r29, 0x00	; 0
	// Wait for empty transmit buffer
	int iterator = 0;
	char current_char = 0;
	do
	{
		current_char = string[iterator];
 106:	2d 91       	ld	r18, X+
		iterator++;
		while (!(UCSR0A & (1<<UDRE0)));
 108:	90 81       	ld	r25, Z
 10a:	95 ff       	sbrs	r25, 5
 10c:	fd cf       	rjmp	.-6      	; 0x108 <serial_send+0x10>
		// Put data into buffer, sends the data
		UDR0 = current_char;
 10e:	28 83       	st	Y, r18
	}
	while(current_char != '\0');
 110:	21 11       	cpse	r18, r1
 112:	f9 cf       	rjmp	.-14     	; 0x106 <serial_send+0xe>
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <serial_receive>:

char serial_receive(){
	/* wait until a character arrives and return it */

	// Wait for data to be received
	while (!(UCSR0A & (1<<RXC0)));
 11a:	e0 ec       	ldi	r30, 0xC0	; 192
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	ec f7       	brge	.-6      	; 0x11e <serial_receive+0x4>
	// Get and return received data from buffer
	return UDR0;
 124:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 128:	08 95       	ret

0000012a <main>:
// not used yet 
/*#include "spi_master.h"
#include "at24c32.h"*/

int main(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <main+0x6>
 130:	1f 92       	push	r1
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	power_on_external_peripherals();
 136:	0e 94 40 00 	call	0x80	; 0x80 <power_on_external_peripherals>
	serial_init(9600);
 13a:	60 e8       	ldi	r22, 0x80	; 128
 13c:	75 e2       	ldi	r23, 0x25	; 37
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 4c 00 	call	0x98	; 0x98 <serial_init>
    while (1) 
    {
		char data[3] = {'a', '\n', '\0'};
 146:	01 e6       	ldi	r16, 0x61	; 97
 148:	1a e0       	ldi	r17, 0x0A	; 10
 14a:	09 83       	std	Y+1, r16	; 0x01
 14c:	1a 83       	std	Y+2, r17	; 0x02
 14e:	1b 82       	std	Y+3, r1	; 0x03
		data[0] = serial_receive();
 150:	0e 94 8d 00 	call	0x11a	; 0x11a <serial_receive>
 154:	89 83       	std	Y+1, r24	; 0x01
		serial_send(data);
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 7c 00 	call	0xf8	; 0xf8 <serial_send>
 15e:	f5 cf       	rjmp	.-22     	; 0x14a <main+0x20>

00000160 <__udivmodsi4>:
 160:	a1 e2       	ldi	r26, 0x21	; 33
 162:	1a 2e       	mov	r1, r26
 164:	aa 1b       	sub	r26, r26
 166:	bb 1b       	sub	r27, r27
 168:	fd 01       	movw	r30, r26
 16a:	0d c0       	rjmp	.+26     	; 0x186 <__udivmodsi4_ep>

0000016c <__udivmodsi4_loop>:
 16c:	aa 1f       	adc	r26, r26
 16e:	bb 1f       	adc	r27, r27
 170:	ee 1f       	adc	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	a2 17       	cp	r26, r18
 176:	b3 07       	cpc	r27, r19
 178:	e4 07       	cpc	r30, r20
 17a:	f5 07       	cpc	r31, r21
 17c:	20 f0       	brcs	.+8      	; 0x186 <__udivmodsi4_ep>
 17e:	a2 1b       	sub	r26, r18
 180:	b3 0b       	sbc	r27, r19
 182:	e4 0b       	sbc	r30, r20
 184:	f5 0b       	sbc	r31, r21

00000186 <__udivmodsi4_ep>:
 186:	66 1f       	adc	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	88 1f       	adc	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	1a 94       	dec	r1
 190:	69 f7       	brne	.-38     	; 0x16c <__udivmodsi4_loop>
 192:	60 95       	com	r22
 194:	70 95       	com	r23
 196:	80 95       	com	r24
 198:	90 95       	com	r25
 19a:	9b 01       	movw	r18, r22
 19c:	ac 01       	movw	r20, r24
 19e:	bd 01       	movw	r22, r26
 1a0:	cf 01       	movw	r24, r30
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
